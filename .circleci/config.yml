version: 2.1

workflows:
  ci-pipeline:
    jobs:
      - movie-review-pipeline

jobs:
  movie-review-pipeline:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-pip-{{ checksum "requirements.txt" }}
            - v1-pip-

      - run:
          name: Install dependencies
          command: pip install -r requirements.txt

      - save_cache:
          key: v1-pip-{{ checksum "requirements.txt" }}
          paths:
            - ~/.cache/pip

      - run:
          name: Run pipeline
          command: dvc repro

      - run:
          name: Run model tests
          command: python -m unittest tests/test_model.py

      - run:
          name: Promote model to production
          command: python scripts/promote_model.py

      - run:
          name: Run Flask app tests
          command: python -m unittest tests/test_flask_app.py

      # enable remote docker first
      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Login to AWS ECR
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_REGION
            aws ecr get-login-password --region $AWS_REGION | \
              docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - run:
          name: Build Docker image
          command: docker build -t $ECR_REPOSITORY:latest .

      - run:
          name: Tag Docker image
          command: |
            docker tag $ECR_REPOSITORY:latest \
              $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest

      - run:
          name: Check Docker Authentication
          command: docker info

      - run:
          name: Push Docker image to ECR
          command: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest


      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/

      - run:
          name: Update kubeconfig
          command: aws eks update-kubeconfig --region $AWS_REGION --name flask-app-cluster

      - run:
          name: Create Kubernetes Secret
          command: |
            kubectl create secret generic dagshub-token \
              --from-literal=DAGSHUB_API_KEY=$DAGSHUB_API_KEY --dry-run=client -o yaml | kubectl apply -f -

      - run:
          name: Deploy to EKS
          command: kubectl apply -f deployment.yaml
